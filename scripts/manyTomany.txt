match(n:AcordNodeType)-[r:HAS_RELATIONSHIP]->(rel:AcordPhysicalRelation)-[r2:HAS_RELATIONSHIP]->(m:AcordNodeType)-[r3:HAS_RELATIONSHIP]->(rel2:AcordPhysicalRelation)
 where rel.cardinality='*' 
and rel.association=rel2.association return rel.association as ass,count(rel.association) as mm order by mm desc;


CALL apoc.custom.asProcedure('mergeMany2Many',
  ' MATCH (a2:AcordNodeType)-[:IS_SUBTYPE_OF]->(pX:AcordPhysicalGeneralization) 
where  
a2.Name = $name 
with collect(a2.Name) as a2Names 
unwind a2Names as x match(a3:AcordNodeType)-[:IS_SUBTYPE_OF]->(p1:AcordPhysicalGeneralization)<-[:IS_SUBTYPE_OF]-(a4:AcordNodeType)
where a3.Name=x 
with collect([a3,a4]) as nodes
unwind nodes as noder 
CALL apoc.refactor.mergeNodes(noder,{properties:"override", mergeRels:true}) 
yield node MATCH (n)-[r:IS_SUBTYPE_OF]->(m) return n,m ','write',
  [['n','NODE'],['m','NODE']],[['name','STRING']]);



MATCH (a2:AcordNodeType)-[:IS_SUBTYPE_OF]->(pX:AcordPhysicalGeneralization) 
where  
a2.Namn in ['Email Contact'] 
with collect(a2.Namn) as a2Namns 
unwind a2Namns as x match(a3:AcordNodeType)-[:IS_SUBTYPE_OF]->(p1:AcordPhysicalGeneralization)<-[:IS_SUBTYPE_OF]-(a4:AcordNodeType)
where a3.Namn=x 
and a4.Namn<>'Information Model Object'
with collect([a3,a4]) as nodes
unwind nodes as noder 
CALL apoc.refactor.mergeNodes(noder,{properties:"override", mergeRels:true}) 
yield node MATCH (n)-[r:IS_SUBTYPE_OF]->(c) return * ;
//#######################this represents it many to many relationships
//########################and merges nodes
match(n:AcordNodeType)-[r:HAS_RELATIONSHIP]->(rel:AcordPhysicalRelation)-[r2:HAS_RELATIONSHIP]->(m:AcordNodeType)-[r3:HAS_RELATIONSHIP]->(rel2:AcordPhysicalRelation)
 where rel.cardinality='*' 
and rel.association=rel2.association
with collect([rel,rel2]) as nodes
unwind nodes as noder 
CALL apoc.refactor.mergeNodes(noder,{properties:"override", mergeRels:false}) 
yield node match(n:AcordNodeType)-[r:HAS_RELATIONSHIP]->(rel)-[r2:HAS_RELATIONSHIP]->(m)-[r3:HAS_RELATIONSHIP]->(rel2)
 where rel.cardinality='*' 
and rel.association=rel2.association return * ;

//#################################################33
CALL apoc.custom.asProcedure('mergeMany2Many',
  'match(n:AcordNodeType)-[r:HAS_RELATIONSHIP]->(rel:AcordPhysicalRelation)-[r2:HAS_RELATIONSHIP]->(m:AcordNodeType)-[r3:HAS_RELATIONSHIP]->(rel2:AcordPhysicalRelation)
 where  rel.association=rel2.association
with collect([rel,rel2]) as nodes
unwind nodes as noder 
CALL apoc.refactor.mergeNodes(noder,{properties:"override", mergeRels:false}) 
yield node match(n:AcordNodeType)-[r:HAS_RELATIONSHIP]->(rel)-[r2:HAS_RELATIONSHIP]->(m)-[r3:HAS_RELATIONSHIP]->(rel2)
 where  rel.association=rel2.association return n, rel,m,rel2','write',
  [['n','NODE'],['rel','NODE'],['m','NODE'],['rel2','NODE']]);

//#################################################

//##################get nodes read nodes
match(n:AcordNodeType)-[r:HAS_RELATIONSHIP]->(rel:AcordPhysicalRelation)-[r2:HAS_RELATIONSHIP]->(m:AcordNodeType)-[r3:HAS_RELATIONSHIP]->(rel2:AcordPhysicalRelation) where 
//rel.cardinality='*' 
//and 
rel.association=rel2.association return rel.association as ass,count(rel.association) as mm order by mm desc;

//####################
match(n:AcordNodeType)-[r:HAS_RELATIONSHIP]->(rel:AcordPhysicalRelation)-[r2:HAS_RELATIONSHIP]->(m:AcordNodeType)-[r3:HAS_RELATIONSHIP]->(rel2:AcordPhysicalRelation) where 
//rel.cardinality='*' 
//rel.association="_fbb714a9_c08111e68803_e7fb8ec78045" and 
rel.association=rel2.association return n.Name,rel.Name,rel2.Name,m.Name;