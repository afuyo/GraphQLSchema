match(n:AcordLogicalModel) detach delete n;


//###############ACORD Create Logical Model#####################################
MATCH 
(o:AcordType)
where o._name = "packagedElement"
and o.type <> "uml:Enumeration" and exists(o.name)
and o.id starts with "_fbb"
with o.name as ObjectName, o.id as FBB
merge (n:AcordLogicalModel:AcordType {ModelName: "LogModel 1", Name: ObjectName, FBB: FBB })
return count(ObjectName);



//#########ACORD Step2 create properties in logical model #########################
MATCH 
(e:AcordType)<-[r:IS_CHILD_OF]-(o:XmlTag)
where o._name = "ownedAttribute" and exists(e.name) 
and o.type <> "uml:Enumeration" and exists(o.name)
and not exists(o.association)
and o.id starts with "_fbb"
with o.name as attribute, e.id as FBB_O, o.id as FBB, o.type as type
merge (n:AcordLogicalModel:AcordLogicalProperty {ModelName: "LogModel 1", Name: attribute, FBB: FBB, FBB_O:FBB_O, type_id:type });


//######DataTypesAsRelations

match (e:AcordLogicalProperty)
match (o:XmlTag)
where (e.type_id=o.id)
with o.name as typeName, o.type as umlType, o.id as type_id 
merge (n:AcordLogicalModel:AcordLogicalDataType {ModelName: "LogModel 1", Name: typeName, FBB:type_id, umlType:umlType});

match (e:AcordLogicalProperty)
match(o:AcordLogicalDataType)
where (e.type_id=o.FBB)
with e.Name as PropertyName, o.Name as DataTypeName, e.FBB as FBB_P, o.FBB as FBB_T
match(e:AcordLogicalProperty {ModelName: "LogModel 1", Name: PropertyName, FBB: FBB_P})
match(o:AcordLogicalDataType {ModelName: "LogModel 1", Name: DataTypeName, FBB: FBB_T})
merge (e)-[:IS_OF_DATA_TYPE]->(o); 



//******with associations + cardinality


MATCH 

(e:AcordType)<-[r:IS_CHILD_OF]-(o:XmlTag)<-[r1:LAST_CHILD_OF]-(t:XmlTag)
where o._name = "ownedAttribute" and exists(e.name) 
and o.type <> "uml:Enumeration" and exists(o.name)
and  exists(o.association)
and o.id starts with "_fbb" 
and t._name="upperValue"
with o.name as attribute, e.id as FBB_O, o.id as FBB, o.association as association, o.type as type, t.value as value_t 
merge (n:AcordLogicalModel:AcordLogicalRelation {ModelName: "LogModel 1", Name: attribute, FBB: FBB, FBB_O:FBB_O, type: type, association: association, cardinality: value_t });





//**************with generalizations 


MATCH
(e:AcordType)<-[r:IS_CHILD_OF]-(o:XmlTag)
where o._name= "generalization" and exists(e.name)
and o.type="uml:Generalization" and exists(o.general)
and o.id starts with "_fbb"
with e.name as attribute, o.id as FBB, e.id as FBB_O, o.general as genOf, o.type as type
merge(n:AcordLogicalModel:AcordLogicalGeneralization {ModelName: "LogModel 1", Name: attribute, FBB: FBB, FBB_O:FBB_O, general:genOf, type:type });




MATCH 
(e:AcordType)<-[r:IS_CHILD_OF]-(o:XmlTag)
where o._name = "ownedAttribute" and exists(e.name) 
and o.type <> "uml:Enumeration" and exists(o.name)
and not exists(o.association)
and o.id starts with "_fbb"
with o.name as PropertyName, o.id as FBB_P, e.name as ObjectName, e.id as FBB_O
match (o:AcordLogicalProperty {ModelName: "LogModel 1", Name: PropertyName, FBB: FBB_P})
match (e:AcordType {ModelName: "LogModel 1", Name: ObjectName, FBB: FBB_O}) 
merge (e)-[:FUNCTIONALLY_DEPENDS]->(o);




//ER relationships + cardinality


MATCH 
(e:AcordType)<-[r:IS_CHILD_OF]-(o:XmlTag)
where o._name = "ownedAttribute" and exists(e.name) 
and o.type <> "uml:Enumeration" and exists(o.name)
and  exists(o.association)
and o.id starts with "_fbb" 
with o.name as PropertyName, o.id as FBB_P, e.name as ObjectName, e.id as FBB_O
match (o:AcordLogicalRelation {ModelName: "LogModel 1", Name: PropertyName, FBB: FBB_P})
match (e:AcordType {ModelName: "LogModel 1", Name: ObjectName, FBB: FBB_O}) 
merge (e)-[:RELATIONALLY_DEPENDS]->(o);



match (o:AcordLogicalRelation)
match (p:AcordType)
where (o.type=p.FBB)
merge (o)-[:RELATIONALLY_DEPENDS]->(p);


// Subtype supertype relationships
MATCH
(e:AcordType)<-[r:IS_CHILD_OF]-(o:XmlTag)
where o._name= "generalization" and exists(e.name)
and o.type="uml:Generalization" and exists(o.general)
and o.id starts with "_fbb"
with o.id as FBB_P, e.name as ObjectName, e.id as FBB_O
match (o:AcordLogicalGeneralization {ModelName: "LogModel 1", FBB: FBB_P})
match (e:AcordType {ModelName: "LogModel 1", Name: ObjectName, FBB: FBB_O})
merge (e)-[:IS_GENERALIZATION_OF]->(o);


match(o:AcordLogicalGeneralization) 
match(p:AcordType) 
where o.general=p.FBB 
merge (o)<-[:IS_GENERALIZATION_OF]-(p);


//################################


//####ACORD Step 4 create orign of relationships


match (g:AcordType), (l:AcordLogicalModel {ModelName: "LogModel 1"}) 
where g.id = l.FBB
with g.id as G_ID, l.FBB as L_ID
match (g:AcordType {id: G_ID})
match (l:AcordLogicalModel {ModelName: "LogModel 1", FBB: L_ID})
merge (g)-[:IS_ORIGIN_OF]->(l);
//##########################ACORD Step 5 create Physical Nodes ##############


